@page "/Account/Register"
@layout MainAuthorizeLayout

@using BlazorApp6.Components.Layout
@using System.ComponentModel.DataAnnotations
@using System.Net.Mime
@using System.Text
@using System.Text.Encodings.Web
@using BlazorApp6.Data
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Регистрация</PageTitle>


<EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
    <DataAnnotationsValidator/>
    <div class="border rounded-3 p-3">
    <div class="row ">
        <h3 class="p-3">Регистрация</h3>
        <div class="col border rounded-3 m-3 p-3">
            <div class=" mb-3">
                <label for="lastName" class="form-label">Фамилия</label>
                <input name="lastName" type="text" class="form-control" id="lastName" placeholder="Иванов" required>
            </div>
            <div class=" mb-3">
                <label for="name" class="form-label">Имя</label>
                <input type="text" name="name" class="form-control" id="name" placeholder="Иван" required>
            </div>

            <div class=" mb-3">
                <label for="middleName" class="form-label">Отчество</label>
                <input type="text" name="middleName" class="form-control" id="middleName" placeholder="Иванович" required>
            </div>
            <div class="mb-3">
                <label for="telephone" class="form-label">Телефон</label>
                <input type="text" name="telephone" class="form-control" id="telephone" required>
            </div>
            <div class="mb-3">
                <label for="date" class="form-label">Дата рождения</label>
                <input type="date" name="date" class="form-control" id="date" required>
            </div>
        </div>
        <div class="col border rounded-3 m-3 p-3">
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com"/>
                <label for="email">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger"/>
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password"/>
                <label for="password">Пароль</label>
                <ValidationMessage For="() => Input.Password" class="text-danger"/>
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password"/>
                <label for="confirm-password">Повтор пароля</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger"/>
            </div>
        </div>
    <div class="col border rounded-3 m-3 p-3">
        <div class="mb-3">
            <label for="city" class="form-label">
                Город
            </label>
            <input type="text" class="form-control" id="city" required>
        </div>

        
        <div class="mb-3">
            <label for="school" class="form-label">Школа</label>
            <input type="text" class="form-control" id="school" required>
        </div>
        <div class="mb-3">
            <label for="сlass" class="form-label">Класс</label>
            <input type="text" class="form-control" id="сlass" required>
        </div>
    </div>
        </div>
        <button type="submit" class="w-50 btn btn-lg btn-primary">Регистрация</button>
</div>

</EditForm>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext) {
        var user = CreateUser();
        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded) {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount) {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private ApplicationUser CreateUser() {
        try {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                                                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore() {
        if (!UserManager.SupportsUserEmail) {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }

        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel {
        [Required(ErrorMessage = "Поле является обязательным.")]
        [EmailAddress(ErrorMessage = "Почта не является действительной.")]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Поле является обязательным.")]
        [StringLength(100, ErrorMessage = "Длина {0} должна быть не менее {2} и не более {1} символов.", MinimumLength = 8)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [Required(ErrorMessage = "Поле является обязательным.")]
        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "Пароли не совпадают.")]
        public string ConfirmPassword { get; set; } = "";
    }

} 
